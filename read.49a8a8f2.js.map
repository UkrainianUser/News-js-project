{"mappings":"2pBAAA,IAAAA,EAAAC,EAAA,S,iEAeIC,EAAsB,iCACtBC,EAAmB,eACnBC,EAAiB,MACjBC,EAA6B,WAyDlB,SAAAC,EAAqBC,EAAWC,IAC7C,EAAAC,EAAAC,SAAa,EAAGC,WAChB,IAAIC,GAAe,EAAAZ,EAAAU,SAAOH,GAE1B,KAAK,EAAAM,EAAAH,SAAQE,GACX,MAAM,IAAIE,WAAW,sBAMvB,IAAIC,GAAiB,EAAAC,EAAAN,SAAgCE,GACjDK,GAAU,EAAAC,EAAAR,SAAgBE,EAAcG,GACxCI,EAASX,EAAUY,MAAMlB,GAE7B,IAAKiB,EAAQ,MAAO,GACpB,IAAIE,EAASF,EAAOG,KAAI,SAAUC,GAEhC,GAAkB,OAAdA,EACF,MAAO,IAGT,IAAIC,EAAiBD,EAAU,GAE/B,GAAuB,MAAnBC,EACF,OAAOC,EAAmBF,GAG5B,IAAIG,EAAYC,EAAAjB,QAAWc,GAE3B,GAAIE,EACF,OAAOA,EAAUT,EAASM,GAG5B,GAAIC,EAAeJ,MAAMf,GACvB,MAAM,IAAIS,WAAW,iEAAmEU,EAAiB,KAG3G,OAAOD,C,IACNK,KAAK,IACR,OAAOP,C,CAGT,SAASI,EAAmBI,GAC1B,IAAIC,EAAUD,EAAMT,MAAMjB,GAE1B,OAAK2B,EAIEA,EAAQ,GAAGC,QAAQ3B,EAAmB,KAHpCyB,C,qFC1HX,IAAApB,EAAAR,EAAA,kBAAS+B,EAAQC,GAAmV,OAAtOD,EAArD,mBAAXE,QAAoD,iBAApBA,OAAOC,SAAmC,SAAiBC,GAAO,cAAcA,C,EAA2B,SAAiBA,GAAO,OAAOA,GAAyB,mBAAXF,QAAyBE,EAAIC,cAAgBH,QAAUE,IAAQF,OAAOI,UAAY,gBAAkBF,C,GAAyBH,E,CAkCpW,SAAAM,EAAgBC,IAC7B,EAAA/B,EAAAC,SAAa,EAAGC,WAChB,IAAI8B,EAASC,OAAOJ,UAAUK,SAASC,KAAKJ,GAE5C,OAAIA,aAAoBK,MAA8B,WAAtBb,EAAQQ,IAAqC,kBAAXC,EAEzD,IAAII,KAAKL,EAASM,WACI,iBAAbN,GAAoC,oBAAXC,EAClC,IAAII,KAAKL,IAES,iBAAbA,GAAoC,oBAAXC,GAAoD,oBAAZM,UAE3EA,QAAQC,KAAK,sNAEbD,QAAQC,MAAK,IAAIC,OAAQC,QAGpB,IAAIL,KAAKM,K,uCCnDL,SAAAC,EAAsBC,EAAUC,GAC7C,GAAIA,EAAKC,OAASF,EAChB,MAAM,IAAIG,UAAUH,EAAW,aAAeA,EAAW,EAAI,IAAM,IAAM,uBAAyBC,EAAKC,OAAS,W,kICFpH,IAAAE,EAAAxD,EAAA,SAmFAyD,EArEiB,CAEfC,EAAG,SAAWC,EAAMC,GASlB,IAAIC,EAAaF,EAAKG,iBAElBC,EAAOF,EAAa,EAAIA,EAAa,EAAIA,EAC7C,OAAO,EAAAL,EAAA/C,SAA0B,OAAVmD,EAAiBG,EAAO,IAAMA,EAAMH,EAAMN,O,EAGnEU,EAAG,SAAWL,EAAMC,GAClB,IAAIK,EAAQN,EAAKO,cACjB,MAAiB,MAAVN,EAAgBO,OAAOF,EAAQ,IAAK,EAAAT,EAAA/C,SAAgBwD,EAAQ,EAAG,E,EAGxEG,EAAG,SAAWT,EAAMC,GAClB,OAAO,EAAAJ,EAAA/C,SAAgBkD,EAAKU,aAAcT,EAAMN,O,EAGlDgB,EAAG,SAAWX,EAAMC,GAClB,IAAIW,EAAqBZ,EAAKa,cAAgB,IAAM,EAAI,KAAO,KAE/D,OAAQZ,GACN,IAAK,IACL,IAAK,KACH,OAAOW,EAAmBE,cAE5B,IAAK,MACH,OAAOF,EAET,IAAK,QACH,OAAOA,EAAmB,GAG5B,QACE,MAA8B,OAAvBA,EAA8B,OAAS,O,EAIpDG,EAAG,SAAWf,EAAMC,GAClB,OAAO,EAAAJ,EAAA/C,SAAgBkD,EAAKa,cAAgB,IAAM,GAAIZ,EAAMN,O,EAG9DqB,EAAG,SAAWhB,EAAMC,GAClB,OAAO,EAAAJ,EAAA/C,SAAgBkD,EAAKa,cAAeZ,EAAMN,O,EAGnDsB,EAAG,SAAWjB,EAAMC,GAClB,OAAO,EAAAJ,EAAA/C,SAAgBkD,EAAKkB,gBAAiBjB,EAAMN,O,EAGrDwB,EAAG,SAAWnB,EAAMC,GAClB,OAAO,EAAAJ,EAAA/C,SAAgBkD,EAAKoB,gBAAiBnB,EAAMN,O,EAGrD0B,EAAG,SAAWrB,EAAMC,GAClB,IAAIqB,EAAiBrB,EAAMN,OACvB4B,EAAevB,EAAKwB,qBACpBC,EAAoBC,KAAKC,MAAMJ,EAAeG,KAAKE,IAAI,GAAIN,EAAiB,IAChF,OAAO,EAAAzB,EAAA/C,SAAgB2E,EAAmBxB,EAAMN,O,wCChFrC,SAAAkC,EAAyBC,EAAQC,GAI9C,IAHA,IAAIC,EAAOF,EAAS,EAAI,IAAM,GAC1BG,EAASP,KAAKQ,IAAIJ,GAAQ/C,WAEvBkD,EAAOtC,OAASoC,GACrBE,EAAS,IAAMA,EAGjB,OAAOD,EAAOC,C,oFCGD,SAAAE,EAAyCnC,GACtD,IAAI3C,EAAU,IAAI4B,KAAKA,KAAKmD,IAAIpC,EAAKqC,cAAerC,EAAKsC,WAAYtC,EAAKuC,UAAWvC,EAAKwC,WAAYxC,EAAKyC,aAAczC,EAAK0C,aAAc1C,EAAK2C,oBAEjJ,OADAtF,EAAQuF,eAAe5C,EAAKqC,eACrBrC,EAAKd,UAAY7B,EAAQ6B,S,kICdlC,IAAA2D,EAAAxG,EAAA,S,0BAmCe,SAAAyG,EAAiBnG,GAG9B,IAFA,EAAAE,EAAAC,SAAa,EAAGC,aAEX,EAAA8F,EAAA/F,SAAOH,IAAmC,iBAAdA,EAC/B,OAAO,EAGT,IAAIqD,GAAO,EAAA5D,EAAAU,SAAOH,GAClB,OAAQoG,MAAMC,OAAOhD,G,qFC3CvB,IAAAnD,EAAAR,EAAA,kBAAS4G,EAAQ5E,GAAmV,OAAtO4E,EAArD,mBAAX3E,QAAoD,iBAApBA,OAAOC,SAAmC,SAAiBC,GAAO,cAAcA,C,EAA2B,SAAiBA,GAAO,OAAOA,GAAyB,mBAAXF,QAAyBE,EAAIC,cAAgBH,QAAUE,IAAQF,OAAOI,UAAY,gBAAkBF,C,GAAyBH,E,CAoCpW,SAAA6E,EAAgBC,GAE7B,OADA,EAAAtG,EAAAC,SAAa,EAAGC,WACToG,aAAiBlE,MAA2B,WAAnBgE,EAAQE,IAAiE,kBAA1CrE,OAAOJ,UAAUK,SAASC,KAAKmE,E,qFCtChG,IAAAC,EAAA/G,EAAA,S,0BAsBe,SAAAgH,EAAyB1G,EAAW2G,IACjD,EAAAzG,EAAAC,SAAa,EAAGC,WAChB,IAAIwG,GAAS,EAAAC,EAAA1G,SAAUwG,GACvB,OAAO,EAAAF,EAAAtG,SAAgBH,GAAY4G,E,qFCzBrC,IAAAC,EAAAnH,EAAA,S,0BAsBe,SAAAoH,EAAyB9G,EAAW2G,IACjD,EAAAzG,EAAAC,SAAa,EAAGC,WAChB,IAAI2G,GAAY,EAAAtH,EAAAU,SAAOH,GAAWuC,UAC9BqE,GAAS,EAAAC,EAAA1G,SAAUwG,GACvB,OAAO,IAAIrE,KAAKyE,EAAYH,E,uCC1Bf,SAAAI,EAAmBC,GAChC,GAAoB,OAAhBA,IAAwC,IAAhBA,IAAwC,IAAhBA,EAClD,OAAOrE,IAGT,IAAIuC,EAASkB,OAAOY,GAEpB,OAAIb,MAAMjB,GACDA,EAGFA,EAAS,EAAIJ,KAAKmC,KAAK/B,GAAUJ,KAAKC,MAAMG,E,0KCX9C,IAAMgC,EAAO,SAACC,EAAKZ,GACxB,IACE,IAAMa,EAAkBC,KAAKC,UAAUf,GACvCgB,aAAaC,QAAQL,EAAKC,E,CAC1B,MAAOK,GACPlF,QAAQkF,MAAM,oBAAqBA,EAAMC,Q,GAIhCC,EAAO,SAAAR,GAClB,IACE,IAAMC,EAAkBG,aAAaK,QAAQT,GAC7C,OAA2B,OAApBC,OAA2BS,EAAYR,KAAKS,MAAMV,E,CACzD,MAAOK,GACPlF,QAAQkF,MAAM,oBAAqBA,EAAMC,Q,wCCd7C,IAAMK,EAAY,QACZC,EAAcC,SAASC,cAAc,WAC3CF,EAAYG,iBAAiB,UAE7B,SAA4BC,GACtBA,EAAEC,OAAOC,SACXL,SAASM,KAAKC,QAAQC,MAAQ,OAC9BlB,aAAaC,QAAQO,EAAW,UAEhCE,SAASM,KAAKC,QAAQC,MAAQ,QAC9BlB,aAAamB,WAAWX,EAAW,Q,IAGvC,WACE,IAEwC,OAApCR,aAAaK,QAAQG,IACe,SAApCR,aAAaK,QAAQG,IAErBC,EAAYM,SAAU,EACtBL,SAASM,KAAKC,QAAQC,MAAQ,SAE9BT,EAAYM,SAAU,EACtBL,SAASM,KAAKC,QAAQC,MAAQ,Q,CAEhC,MAAOhB,GACPlF,QAAQoG,IAAIlB,E,EAvBhBmB,E,sCCHC,IACOC,EACAC,EACAC,EAEAC,EAJAH,EAAaZ,SAASC,cAAc,sBACpCY,EAAcb,SAASC,cAAc,iBACrCa,EAAed,SAASC,cAAc,kBAEtCc,EAAa,WACjB,IAAMC,EAC0C,SAA9CH,EAAYI,aAAa,mBAA+B,EAC1DJ,EAAYK,aAAa,iBAAkBF,GAC3CJ,EAAWO,UAAUC,OAAO,WAK5BC,eAH0BL,EAEtB,mBADA,qBAE6BhB,SAASM,K,EAG5CO,EAAYX,iBAAiB,QAASa,GACtCD,EAAaZ,iBAAiB,QAASa,GAGvCO,OAAOC,WAAW,sBAAsBrB,iBAAiB,UAAU,SAAAC,GAC5DA,EAAE9G,UACPuH,EAAWO,UAAUK,OAAO,WAC5BX,EAAYK,aAAa,iBAAiB,GAC1CG,eAAeI,iBAAiBzB,SAASM,M,yCCzB7C,IAAMoB,EAAY,QACZC,EAAc3B,SAASC,cAAc,kBAC3C0B,EAAYzB,iBAAiB,UAI7B,SAA4BC,GACtBA,EAAEC,OAAOC,SACXL,SAASM,KAAKC,QAAQC,MAAQ,OAC9BlB,aAAaC,QAAQmC,EAAW,UAEhC1B,SAASM,KAAKC,QAAQC,MAAQ,QAC9BlB,aAAamB,WAAWiB,EAAW,Q,IAIvC,WACE,IAEwC,OAApCpC,aAAaK,QAAQ+B,IACe,SAApCpC,aAAaK,QAAQ+B,IAErBC,EAAYtB,SAAU,EACtBL,SAASM,KAAKC,QAAQC,MAAQ,SAE9BmB,EAAYtB,SAAU,EACtBL,SAASM,KAAKC,QAAQC,MAAQ,Q,CAEhC,MAAOhB,GACPlF,QAAQoG,IAAIlB,E,EAzBhBoC,E","sources":["node_modules/date-fns/esm/lightFormat/index.js","node_modules/date-fns/esm/toDate/index.js","node_modules/date-fns/esm/_lib/requiredArgs/index.js","node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","node_modules/date-fns/esm/isValid/index.js","node_modules/date-fns/esm/isDate/index.js","node_modules/date-fns/esm/subMilliseconds/index.js","node_modules/date-fns/esm/addMilliseconds/index.js","node_modules/date-fns/esm/_lib/toInteger/index.js","src/js/storage.js","src/js/theme-toggle.js","src/js/mobile-menu.js","src/js/mobile-theme-toggle.js"],"sourcesContent":["import toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/lightFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name lightFormat\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. Unlike `format`,\n * `lightFormat` doesn't use locales and outputs date using the most popular tokens.\n *\n * > ⚠️ Please note that the `lightFormat` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   |\n * |---------------------------------|---------|-----------------------------------|\n * | AM, PM                          | a..aaa  | AM, PM                            |\n * |                                 | aaaa    | a.m., p.m.                        |\n * |                                 | aaaaa   | a, p                              |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 |\n * |                                 | yy      | 44, 01, 00, 17                    |\n * |                                 | yyy     | 044, 001, 000, 017                |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |\n * |                                 | MM      | 01, 02, ..., 12                   |\n * | Day of month                    | d       | 1, 2, ..., 31                     |\n * |                                 | dd      | 01, 02, ..., 31                   |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |\n * |                                 | hh      | 01, 02, ..., 11, 12               |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |\n * |                                 | HH      | 00, 01, 02, ..., 23               |\n * | Minute                          | m       | 0, 1, ..., 59                     |\n * |                                 | mm      | 00, 01, ..., 59                   |\n * | Second                          | s       | 0, 1, ..., 59                     |\n * |                                 | ss      | 00, 01, ..., 59                   |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |\n * |                                 | SS      | 00, 01, ..., 99                   |\n * |                                 | SSS     | 000, 001, ..., 999                |\n * |                                 | SSSS    | ...                               |\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * const result = lightFormat(new Date(2014, 1, 11), 'yyyy-MM-dd')\n * //=> '2014-02-11'\n */\n\nexport default function lightFormat(dirtyDate, formatStr) {\n  requiredArgs(2, arguments);\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var tokens = formatStr.match(formattingTokensRegExp); // The only case when formattingTokensRegExp doesn't match the string is when it's empty\n\n  if (!tokens) return '';\n  var result = tokens.map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      return formatter(utcDate, substring);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  var matches = input.match(escapedStringRegExp);\n\n  if (!matches) {\n    return input;\n  }\n\n  return matches[1].replace(doubleQuoteRegExp, \"'\");\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import addLeadingZeros from \"../../addLeadingZeros/index.js\";\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function M(date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function d(date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function a(date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaa':\n        return dayPeriodEnumValue;\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function h(date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function H(date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function m(date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function s(date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function S(date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","import isDate from \"../isDate/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\n\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","import addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","export const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error('Set state error: ', error.message);\n  }\n};\n\nexport const load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error('Set state error: ', error.message);\n  }\n};\n\nexport const remove = key => {\n  try {\n      localStorage.removeItem(key);\n  } catch (error) {\n      console.error(\"Set state error: \", error.message);\n  }\n};","const THEME_KEY = 'theme';\nconst themeToggle = document.querySelector('#toggle');\nthemeToggle.addEventListener('change', onThemeToggleClick);\ngetTheme();\nfunction onThemeToggleClick(e) {\n  if (e.target.checked) {\n    document.body.dataset.theme = 'dark';\n    localStorage.setItem(THEME_KEY, 'dark');\n  } else {\n    document.body.dataset.theme = 'light';\n    localStorage.removeItem(THEME_KEY, 'dark');\n  }\n}\nfunction getTheme() {\n  try {\n    if (\n      localStorage.getItem(THEME_KEY) !== null &&\n      localStorage.getItem(THEME_KEY) === 'dark'\n    ) {\n      themeToggle.checked = true;\n      document.body.dataset.theme = 'dark';\n    } else {\n      themeToggle.checked = false;\n      document.body.dataset.theme = 'light';\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}","(() => {\n  const mobileMenu = document.querySelector('.js-menu-container');\n  const openMenuBtn = document.querySelector('.js-open-menu');\n  const closeMenuBtn = document.querySelector('.js-close-menu');\n\n  const toggleMenu = () => {\n    const isMenuOpen =\n      openMenuBtn.getAttribute('aria-expanded') === 'true' || false;\n    openMenuBtn.setAttribute('aria-expanded', !isMenuOpen);\n    mobileMenu.classList.toggle('is-open');\n\n    const scrollLockMethod = !isMenuOpen\n      ? 'disableBodyScroll'\n      : 'enableBodyScroll';\n    bodyScrollLock[scrollLockMethod](document.body);\n  };\n\n  openMenuBtn.addEventListener('click', toggleMenu);\n  closeMenuBtn.addEventListener('click', toggleMenu);\n\n  // Close the mobile menu on wider screens if the device orientation changes\n  window.matchMedia('(min-width: 768px)').addEventListener('change', e => {\n    if (!e.matches) return;\n    mobileMenu.classList.remove('is-open');\n    openMenuBtn.setAttribute('aria-expanded', false);\n    bodyScrollLock.enableBodyScroll(document.body);\n  });\n})();\n","const THEME_KEY = 'theme';\nconst themeToggle = document.querySelector('#mobile-toggle');\nthemeToggle.addEventListener('change', onThemeToggleClick);\n\ngetTheme();\n\nfunction onThemeToggleClick(e) {\n  if (e.target.checked) {\n    document.body.dataset.theme = 'dark';\n    localStorage.setItem(THEME_KEY, 'dark');\n  } else {\n    document.body.dataset.theme = 'light';\n    localStorage.removeItem(THEME_KEY, 'dark');\n  }\n}\n\nfunction getTheme() {\n  try {\n    if (\n      localStorage.getItem(THEME_KEY) !== null &&\n      localStorage.getItem(THEME_KEY) === 'dark'\n    ) {\n      themeToggle.checked = true;\n      document.body.dataset.theme = 'dark';\n    } else {\n      themeToggle.checked = false;\n      document.body.dataset.theme = 'light';\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n"],"names":["$2XKMM","parcelRequire","$99f02d1dc4b89cf1$var$formattingTokensRegExp","$99f02d1dc4b89cf1$var$escapedStringRegExp","$99f02d1dc4b89cf1$var$doubleQuoteRegExp","$99f02d1dc4b89cf1$var$unescapedLatinCharacterRegExp","$99f02d1dc4b89cf1$export$2e2bcd8739ae039","dirtyDate","formatStr","$fnuNu","default","arguments","originalDate","$hdCHw","RangeError","timezoneOffset","$4xr1p","utcDate","$5oyvs","tokens","match","result","map","substring","firstCharacter","$99f02d1dc4b89cf1$var$cleanEscapedString","formatter","$hT45u","join","input","matches","replace","$2285621ea3fa8491$var$_typeof","obj1","Symbol","iterator","obj","constructor","prototype","$2285621ea3fa8491$export$2e2bcd8739ae039","argument","argStr","Object","toString","call","Date","getTime","console","warn","Error","stack","NaN","$b320e4b5494ae3f6$export$2e2bcd8739ae039","required","args","length","TypeError","$aPk8F","$d05abe6e05e9075a$export$2e2bcd8739ae039","y","date","token","signedYear","getUTCFullYear","year","M","month","getUTCMonth","String","d","getUTCDate","a","dayPeriodEnumValue","getUTCHours","toUpperCase","h","H","m","getUTCMinutes","s","getUTCSeconds","S","numberOfDigits","milliseconds","getUTCMilliseconds","fractionalSeconds","Math","floor","pow","$7e1e49f3280ac08a$export$2e2bcd8739ae039","number","targetLength","sign","output","abs","$34df346d5c5052d9$export$2e2bcd8739ae039","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","$fJsWq","$c891abca0473dd2d$export$2e2bcd8739ae039","isNaN","Number","$b741822595cea3a4$var$_typeof","$b741822595cea3a4$export$2e2bcd8739ae039","value","$hEtRc","$3ed9f5de8fc7a4e8$export$2e2bcd8739ae039","dirtyAmount","amount","$k35UP","$cd9d55142ab92e73$export$2e2bcd8739ae039","timestamp","$e988ad2ce58d9c6e$export$2e2bcd8739ae039","dirtyNumber","ceil","$e40a24b7fc93604f$export$a1544dad697b423d","key","serializedState","JSON","stringify","localStorage","setItem","error","message","$e40a24b7fc93604f$export$11e63f7b0f3d9900","getItem","undefined","parse","$4b360ea48ce96d8f$var$THEME_KEY","$4b360ea48ce96d8f$var$themeToggle","document","querySelector","addEventListener","e","target","checked","body","dataset","theme","removeItem","log","$4b360ea48ce96d8f$var$getTheme","mobileMenu","openMenuBtn","closeMenuBtn","toggleMenu","isMenuOpen","getAttribute","setAttribute","classList","toggle","bodyScrollLock","window","matchMedia","remove","enableBodyScroll","$ab82dae4a3ae06d7$var$THEME_KEY","$ab82dae4a3ae06d7$var$themeToggle","$ab82dae4a3ae06d7$var$getTheme"],"version":3,"file":"read.49a8a8f2.js.map"}