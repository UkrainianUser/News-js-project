{"mappings":"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","sources":["src/indexHome.js","src/js/categories.js","src/js/weather.js","src/js/weatherBase.js"],"sourcesContent":["import './js/home-page';\nimport './js/categories';\nimport './js/weather';\nimport './js/weatherBase';\nimport './js/pagination';\nimport './js/filter-date';\n","import { FetchNews } from './fetchNewsApi';\nimport { fetchNews } from './fetchNews';\nimport { renderCard } from './renderCard';\n\nconst newsAPI = new FetchNews();\n\nconst categoriesContainer = document.getElementById('categories-container');\nconst menuContainer = document.getElementById('menu-container');\nconst dropbtn = document.querySelector('.dropbtn');\nfetchNewsCategory();\n\nfunction fetchNewsCategory() {\n  return fetch(\n    `https://api.nytimes.com/svc/news/v3/content/section-list.json?api-key=UPfW6vgRuPuGF8dWeumSDLnq86AeLhG1`\n  )\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .then(data => {\n      // Создаем кнопки для первых 5 категорий\n      const categories = data.results\n        .slice(0, 5)\n        .map(category => category.section);\n\n      const buttonCategories = Array.from(categoriesContainer.children).map(\n        button => button.getAttribute('name')\n      );\n\n      // Найти категории, которых еще нет в ссылках\n      const newCategories = data.results\n        .filter(category => !buttonCategories.includes(category.section))\n        .map(category => category.section);\n\n      categories.forEach(category => {\n        const link = createLink(category);\n        categoriesContainer.appendChild(link);\n      });\n      createMenu(categories, newCategories);\n\n      // menuContainer.appendChild(menu);\n    })\n    .catch(error => {\n      console.error(error);\n    });\n}\n// Функция для создания ссылки\nfunction createLink(category) {\n  const link = document.createElement('a');\n  link.classList.add('categories-container_link', 'dropdown-link');\n  link.textContent = category;\n  link.setAttribute('href', '#');\n  link.setAttribute('name', category);\n\n  link.addEventListener('click', () => {\n    const categoryName = link.getAttribute('name');\n    newsAPI.category = categoryName;\n    newsAPI\n      .fetchByCategory()\n      .then(articles => {\n        renderCard(articles);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n\n    const links = Array.from(categoriesContainer.children);\n    links.forEach(l => {\n      if (l === link) {\n        l.classList.add('activee');\n      } else if (l.classList.contains('activee')) {\n        l.classList.remove('activee');\n      }\n    });\n  });\n\n  return link;\n}\n\nfunction createMenu(categories, newCategories) {\n  const dropdown = document.getElementById('myDropdown');\n  dropdown.innerHTML = '';\n\n  const menuCategories = categories.concat(newCategories);\n\n  const existingLinks = Array.from(dropdown.children).map(link =>\n    link.getAttribute('name')\n  );\n\n  const uniqueCategories = menuCategories.filter(\n    category => !existingLinks.includes(category)\n  );\n\n  // Удаляем первые пять категорий из массива uniqueCategories\n  const filteredCategories = uniqueCategories.filter(\n    category => !categories.slice(0, 5).includes(category)\n  );\n\n  filteredCategories.forEach(category => {\n    const link = createLink(category);\n    dropdown.appendChild(link);\n  });\n\n  const dropdownLinks = dropdown.querySelectorAll('a');\n  dropdownLinks.forEach(link => {\n    link.classList.add('categories-container_link_dropDown');\n    if (categories.includes(link.getAttribute('name'))) {\n      const index = categories.indexOf(link.getAttribute('name'));\n      if (index < 5) {\n        link.classList.add('activee');\n      }\n    }\n  });\n\n  // установить фиксированную высоту для меню\n  dropdown.style.height = '380px';\n  // добавить скролл\n  dropdown.style.overflowY = 'scroll';\n\n  return dropdown;\n}\n\ndropbtn.addEventListener('click', onDropBtn);\n\n//  Когда пользователь нажимает на кнопку,\n// переключаться между скрытием и отображением выпадающего содержимого\nfunction onDropBtn() {\n  document.getElementById('myDropdown').classList.toggle('show');\n}\n\n// Закрываем раскрывающийся список, если пользователь щелкает за его пределами\nwindow.onclick = function (event) {\n  if (!event.target.matches('.dropbtn')) {\n    var dropdowns = document.getElementsByClassName('dropdown-content');\n    var i;\n    for (i = 0; i < dropdowns.length; i++) {\n      var openDropdown = dropdowns[i];\n      if (openDropdown.classList.contains('show')) {\n        openDropdown.classList.remove('show');\n      }\n    }\n  }\n};\n\nconsole.log('test');\n","import axios from \"axios\";\n\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5/weather'\nconst KEY_API = '8263fe3022d7c26abc78442437d890b7';\nlet lat = 40.711217;\nlet lon = -74.006889;\n\nfunction success(pos) {\n    const crd = pos.coords;\n    \n    lat = crd.latitude;\n    lon = crd.longitude;\n    localStorage.setItem('latitude', lat);\n    localStorage.setItem('longitude', lon);\n  };\n  \n  function error(err) {\n    console.warn(`ERROR(${err.code}): ${err.message}`);\n    localStorage.removeItem('latitude', lat); \n    localStorage.removeItem('longitude', lon);\n  };\n  \n  navigator.geolocation.getCurrentPosition(success, error);\n  \n\n   export async function getWeather() {\n    try {\n    if (success) {\n      \n        return await axios.get(BASE_URL, {\n            params: {\n              lat: localStorage.getItem('latitude') || lat,\n              lon: localStorage.getItem('longitude') || lon,\n              appid: KEY_API,\n              units: 'metric',\n            },\n          }); \n    }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n","import weather, { getWeather }  from \"./weather\";\n\nconst weatherForm = document.querySelector('.weather');\n\n async function addWeather() {\n  try {\n    const response = await getWeather();\n    const data = await response.data;\n    const createMarkup = `\n    <div class=\"weather__block\"><span class=\"weather__number\">${Math.round(data.main.temp)}&#176;</span>\n      <div class = \"weather__location\"><h2 class=\"weather__title\">${data.weather[0].main}</h2>\n      <p class=\"weather__city\"><svg class=\"weather__svg\" width=\"16\" height=\"16\">\n      <use href=\"/symbol-defs.33050382.svg#icon-carbon_location-filled\"></use>\n    </svg>${data.name}</p></div></div>\n      <img class=\"weather__icon\" src=\"https://openweathermap.org/img/wn/${data.weather[0].icon}.png\" alt=\"${data.weather[0].description}\">\n      <p class=\"weather__date\">${new Date(data.dt*1000).toDateString()}</p>`\n      \n\n    return weatherForm.insertAdjacentHTML('afterbegin', createMarkup);\n  \n  } catch (error) {\n    console.error(error);\n  }\n }\n\n addWeather();\n\n\n"],"names":["parcelRequire","$kd58i","$f3b06000f9b46fbb$var$newsAPI","FetchNews","$f3b06000f9b46fbb$var$categoriesContainer","document","getElementById","$f3b06000f9b46fbb$var$dropbtn","querySelector","$f3b06000f9b46fbb$var$createLink","category","link","createElement","classList","add","textContent","setAttribute","addEventListener","categoryName","getAttribute","fetchByCategory","then","articles","$fDIS9","renderCard","catch","error","console","Array","from","children","forEach","l","contains","remove","fetch","response","ok","Error","json","data","categories","results","slice","map","section","buttonCategories","button","newCategories","filter","includes","appendChild","dropdown","innerHTML","menuCategories","concat","existingLinks","uniqueCategories","querySelectorAll","indexOf","style","height","overflowY","$f3b06000f9b46fbb$var$createMenu","toggle","window","onclick","event","target","matches","i","dropdowns","getElementsByClassName","length","openDropdown","log","$2shzp","$83ee39fa453a4c23$var$lat","$83ee39fa453a4c23$var$lon","$83ee39fa453a4c23$var$success","pos","crd","coords","latitude","longitude","localStorage","setItem","async","$83ee39fa453a4c23$export$ce1081f0c9899666","default","get","params","lat","getItem","lon","appid","units","error1","navigator","geolocation","getCurrentPosition","err","warn","code","message","removeItem","$ff045e22919394c8$var$weatherForm","createMarkup","Math","round","main","temp","weather","name","icon","description","Date","dt","toDateString","insertAdjacentHTML","$ff045e22919394c8$var$addWeather"],"version":3,"file":"index.c0fd903a.js.map"}